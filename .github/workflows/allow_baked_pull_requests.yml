name: Check on bake time
on:
  workflow_dispatch:
  schedule:
    - cron: '0 */1 * * *' # Runs every 1 hour

jobs:
  check_bake_time:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const delayHours = 0.01;
            const millisInAnHour = 60 * 60 * 1000;
            const delayMilliseconds = delayHours * millisInAnHour;

            // List all pull requests with the bake-time label
            const { data: pullRequests } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'bake-time'
            });

            const now = new Date();
            for (const pr of pullRequests) {
              const updatedAt = new Date(pr.updated_at);

              const { data: checkRuns } = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: pr.head.sha,
                name: 'Bake Time Delayed Check'
              });

              const bakeTimeCheckRun = checkRuns.check_runs.filter(run => run.name === 'Bake Time Delayed Check')[0];
              if (!bakeTimeCheckRun) {
                console.log(`No check named 'Bake Time Delayed Check' for PR #${pr.number}.`);
                for (const run of checkRuns.check_runs) {
                  console.log(`Found ${run.id} named ${run.name} with status ${run.status} for PR #${pr.number}.`)
                }
                continue;
              } 

              // Check if the pull request has not been updated in the specified delay
              if (now - updatedAt >= delayMilliseconds) {
                console.log(`Marking status check as successful for PR #${pr.number}.`);

                // Remove the label
                await github.rest.issues.removeLabel({
                  issue_number: pr.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: 'bake-time'
                });

                // Mark the status check as successful
                const { data: checkUpdate } = await github.rest.checks.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  check_run_id: bakeTimeCheckRun.id,
                  status: 'completed',
                  conclusion: 'success',
                  output: {
                    title: 'The bake time delay has passed. This PR can be merged.',
                    summary: 'The required delay is over, and the check has passed'
                  }
                });
                console.log(`Check marked as successful for PR #${pr.number}.`);
                console.log(`Detailed check update message ${JSON.stringify(checkUpdate, undefined, 3)}`);
              } else {
                const timeRemaining = (delayMilliseconds - (now - updatedAt)) / (millisInAnHour);
                console.log(`PR #${pr.number} still needs to wait for ${timeRemaining.toFixed(2)} hours before the delay is over.`);
              }
            }
